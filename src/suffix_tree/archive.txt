suffix_tree_node* suffix_tree::node_hops(suffix_tree_node* cur_ptr, size_t start, size_t length) {
  if (length == 0) {
    return cur_ptr;
  }

  suffix_tree_node* next_hop = cur_ptr->find_child(this->m_str, start);

  assert(next_hop && "FATAL ERROR, next hop was null inside node_hops");

  if (length == next_hop->m_size) {
    return next_hop;
  } else if (length > next_hop->m_size) {
    size_t next_start = start + next_hop->m_size;
    size_t next_length = length - next_hop->m_size;
    return this->node_hops(next_hop, next_start, next_length);
  } else {
    return this->split_edge(next_hop, length);
  }
}

void suffix_tree::resolve_missing_suffix_link(suffix_tree_node* start_ptr) {
  suffix_tree_node* parent_ptr = start_ptr->m_parent_ptr;

  if (!parent_ptr->m_suffix_link_ptr) {
    this->resolve_missing_suffix_link(parent_ptr);
  }

  size_t start = start_ptr->m_start_idx;
  size_t length = start_ptr->m_size;

  if (parent_ptr == this->m_root_ptr) {
    ++start;
    --length;
  }

  suffix_tree_node* suffix_link = this->node_hops(parent_ptr->m_suffix_link_ptr, start, length);

  start_ptr->m_suffix_link_ptr = suffix_link;
}
